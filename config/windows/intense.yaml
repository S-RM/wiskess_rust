wiskers:
  - name: MFTECmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\MFTECmd.exe'
    args: '-f {input} --csv {outfolder} --csvf {outfile}'
    outfolder: FileSystem
    outfile: MFTECmd.csv
    input: mft
    github: https://github.com/EricZimmerman/MFTECmd.git
  - name: mft
    binary: '{tool_path}\mft\mft.exe'
    args: '-o csv -f {outfolder}/{outfile} {input}'
    outfolder: FileSystem
    outfile: mft.csv
    input: mft
    github: https://github.com/omerbenamram/mft
  - name: usnjrnl-j
    binary: '{tool_path}\Get-ZimmermanTools\net9\MFTECmd.exe'
    args: '-f {input} --csv {outfolder} --csvf {outfile}'
    outfolder: FileSystem
    outfile: usnjrnl-j-file.csv
    input: j_file
    github: https://github.com/EricZimmerman/MFTECmd.git
  - name: rbcmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\RBCmd.exe'
    args: '-d {input} --csv {outfolder} -q'
    outfolder: FileSystem
    outfile: '*RBCmd_Output.csv'
    input: recycle_bin
    github: https://github.com/EricZimmerman/RBCmd.git
  - name: lnk
    binary: '{tool_path}\Get-ZimmermanTools\net9\LECmd.exe'
    args: -d {input} --csv {outfolder} --csvf {outfile} -q
    outfolder: FileSystem
    outfile: lnk-files.csv
    input: user_dir
    github: https://github.com/EricZimmerman/LECmd.git
  - name: evtx_dump
    binary: 'fd'
    args: '.* -e evtx -p {input} -x {tool_path}\evtx\evtx.exe -o jsonl > {outfolder}\{outfile}'
    outfolder: EventLogs
    outfile: evtx_dump.json
    input: winevt
    github: https://github.com/omerbenamram/evtx.git
  - name: EvtxECmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\EvtxECmd\EvtxECmd.exe'
    args: '-d {input} --csv {outfolder} --csvf {outfile}'
    outfolder: EventLogs
    outfile: EvtxECmd-All.csv
    input: winevt
    github: https://github.com/EricZimmerman/evtx.git
  - name: hayabusa
    binary: '{tool_path}\hayabusa\hayabusa.exe'
    args: 'csv-timeline -d {input} -o {outfolder}\{outfile} -p timesketch-verbose --ISO-8601 -w'
    outfolder: EventLogs
    outfile: hayabusa.csv
    input: winevt
    github: 
    para: false
  - name: chainsaw_evtx
    binary: '{tool_path}\chainsaw\chainsaw.exe'
    args: 'hunt {input} -s {tool_path}\chainsaw\chainsaw\sigma -r {tool_path}\chainsaw\chainsaw\rules --mapping {tool_path}\chainsaw\chainsaw\mappings\sigma-event-logs-all.yml --csv -o {outfolder} --full --skip-errors'
    outfolder: EventLogs\chainsaw
    outfile: sigma.csv
    input: winevt
    github: https://github.com/WithSecureLabs/chainsaw.git
    para: false
  - name: chainsaw_shim
    binary: '{tool_path}\chainsaw\chainsaw.exe'
    args: 'analyse shimcache {input} --regexfile {tool_path}\shimcache_patterns.txt --amcache {input_other} --tspair --output {outfolder}\{outfile}'
    input: system
    input_other: amcache
    valid_path: '{root}\Windows\AppCompat\Programs\Amcache.hve'
    outfolder: FileExecution
    outfile: chainsaw_shim.csv
    github: https://github.com/WithSecureLabs/chainsaw.git
  - name: AmcacheParser
    binary: '{tool_path}\Get-ZimmermanTools\net9\AmcacheParser.exe'
    args: '-f {input} --csv {outfolder} -i'
    outfolder: FileExecution
    outfile: '*_Amcache_*'
    input: amcache
    github: https://github.com/EricZimmerman/AmcacheParser.git
  - name: chainsaw_srum
    binary: '{tool_path}\chainsaw\chainsaw.exe'
    args: analyse srum --software {input}\config\SOFTWARE {input}\SRU\SRUDB.dat --output {outfolder}\{outfile}
    input: system32
    valid_path: '{root}\Windows\System32\SRU\SRUDB.dat'
    outfolder: Network
    outfile: chainsaw_srum.json
    github: https://github.com/WithSecureLabs/chainsaw.git
  - name: AppCompatCache
    binary: '{tool_path}\Get-ZimmermanTools\net9\AppCompatCacheParser.exe'
    args: '-f {input} --csv {outfolder} --csvf {outfile}'
    outfolder: FileExecution
    outfile: appcompatcache.csv
    input: system
    github: https://github.com/EricZimmerman/AppCompatCacheParser.git
  - name: RecentFileCacheParser
    binary: '{tool_path}\Get-ZimmermanTools\net9\RecentFileCacheParser.exe'
    args: '-f {input} --csv {outfolder} --csvf {outfile}'
    outfolder: FileExecution
    outfile: RecentFileCache.csv
    input: recentFileCache
    github: https://github.com/EricZimmerman/RecentFileCacheParser.git
  - name: SCCM_RecentlyUsedApplication
    binary: py
    args: '-2 {tool_path}\CCM_RUA_Finder.py -i {input} -o {outfolder}\{outfile}'
    outfolder: FileExecution
    outfile: SCCM_RecentlyUsedApplication.psv
    input: objects
    github: https://github.com/davidpany/WMI_Forensics.git
  - name: WMIPersistenceFinder
    binary: py
    args: '-2 {tool_path}\PyWMIPersistenceFinder.py {input} {outfolder}/{outfile}'
    outfolder: FileExecution
    outfile: PyWMIPersistenceFinder.txt
    input: objects
    github: https://github.com/davidpany/WMI_Forensics.git
  - name: Prefetch
    binary: '{tool_path}\Get-ZimmermanTools\net9\PECmd.exe'
    args: '-d {input} --csv {outfolder} --csvf {outfile} --vss --mp -q'
    outfolder: FileExecution
    outfile: prefetch.csv
    input: prefetch
    github: https://github.com/EricZimmerman/Prefetch.git
  - name: SrumECmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\SrumECmd.exe'
    args: '-f {input} -r {input_other} --csv {outfolder}'
    outfolder: Network
    outfile: '*_SrumECmd_*.csv'
    input: srum
    input_other: software
    valid_path: '{root}\Windows\System32\SRU\SRUDB.dat'
    github: https://github.com/EricZimmerman/SrumECmd.git
  - name: srumdump
    binary: '{tool_path}\srum-dump\srum_dump2.6.exe'
    args: '-i {input} -r {input_other} -t {tool_path}\srum-dump\SRUM_TEMPLATE3.xlsx -o {outfolder}\{outfile}'
    outfolder: Network
    outfile: srum-dump.xlsx
    input: srum
    input_other: software
    valid_path: '{root}\Windows\System32\SRU\SRUDB.dat'
    github: https://github.com/MarkBaggett/srum-dump.git
  - name: hindsight
    binary: '{tool_path}\hindsight\hindsight.exe'
    args: ' -i {input} -f jsonl -o {outfolder}\hindsight'
    outfolder: Network
    outfile: hindsight.jsonl
    input: chrome
    valid_path: '{root}\Users\*\AppData\Local\Google\Chrome\User Data\Default'
    github: https://github.com/obsidianforensics/hindsight.git
  - name: Browsing History
    binary: '{tool_path}\BrowsingHistoryView.exe'
    args: '/sort 2 /historysource 3 /historysourcefolder {input} /visittimefiltertype 1 /showTimeInGMT 1 /scomma {outfolder}/{outfile}'
    outfile: BrowsingHistory.csv
    outfolder: Network
    input: user_dir
    chk_exists: false
    web_download: https://www.nirsoft.net/utils/browsinghistoryview-x64.zip
  - name: consolehost_history
    binary: 'pwsh.exe'
    args: -c Write-Host "script was ran"
    outfolder: PSReadLine
    outfile: '*ConsoleHost_history.txt'
    input: consolehost_history
    github: 
    script: true
    script_posh: '$hist = "{input}";
      $outDir = "{outfolder}";
      if ($hist -ne "") {
        Get-ChildItem $hist | ForEach-Object { 
            $fn = $($_ -Replace ".*Users\\([^\\]+).+","`$1_ConsoleHost_history.txt"); 
            Get-Content $_ | Out-File -FilePath "$outDir\$fn";
        }
      }'
  - name: SumECmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\SumECmd.exe'
    args: '-d {input} --csv {outfolder}'
    outfolder: Network
    outfile: '*SumECmd*.csv'
    input: sum
    github: https://github.com/EricZimmerman/SumECmd.git
    script: true
    script_posh: '$sum = ("{input}" -replace "^\\\\\?\\");
    $outDir = "{outfolder}";
    $outFile = "{outfile}";
    if ($(Test-Path -PathType Container -Path "$sum") -eq $True -and $(Test-Path -Path "$outDir\$outFile") -eq $False) {
        if ($sum.length -le 32) {
            mkdir "$outDir\SumArtefacts";
            Copy-Item -Path "$sum" -Filter "*.mdb" -Destination "$outDir\SumArtefacts" -Recurse;
            $sum = "$outDir\SumArtefacts";
        }
        esentutl.exe /r svc /i /s "$sum" /l "$sum";
        Get-ChildItem -Filter "*.mdb" "$sum" | % {esentutl.exe /p $_.FullName /f $_.FullName /o;};
        if ($(Test-Path -PathType Container "$outDir\SumArtefacts")) {
            Remove-Item -Force -Recurse "$outDir\SumArtefacts";
        }
    }'
  - name: RegSystem
    binary: '{tool_path}\Get-ZimmermanTools\net9\RECmd\RECmd.exe'
    args: '--bn {tool_path}\Get-ZimmermanTools\net9\RECmd\BatchExamples\Kroll_Batch.reb --nl=false -d {input} --csv {outfolder} --csvf {outfile}'
    outfolder: Registry
    outfile: reg-System.csv
    input: system_config
    github:
  - name: RegUser
    binary: '{tool_path}\Get-ZimmermanTools\net9\RECmd\RECmd.exe'
    args: '--bn {tool_path}\Get-ZimmermanTools\net9\RECmd\BatchExamples\Kroll_Batch.reb --nl=false -d {input} --csv {outfolder} --csvf {outfile}'
    outfolder: Registry
    outfile: reg-User.csv
    input: user_dir
    github:
  - name: SBE
    binary: '{tool_path}\Get-ZimmermanTools\net9\SBECmd.exe'
    args: '-d {input} --csv {outfolder}'
    outfolder: UserActivity
    outfile: '*SBECmd_Messages.txt'
    input: user_dir
    github:
  - name: JLECmd
    binary: '{tool_path}\Get-ZimmermanTools\net9\JLECmd.exe'
    args: '-d {input} --csv {outfolder} -q'
    outfolder: UserActivity
    outfile: '*Destinations.csv'
    input: user_dir
    github:
  - name: KStrike
    binary: py
    args: '{tool_path}/KStrike/KStrike.py {input}\Current.mdb > {outfolder}\{outfile}'
    input: sum
    valid_path: '{root}\Windows\System32\LogFiles\Sum\Current.mdb'
    outfolder: Network
    outfile: UAL_Kstrike.psv
    github: https://github.com/brimorlabs/KStrike
  - name: shellbags_usrclass
    binary: fd
    args: '-i USRCLASS\.DAT {input} -x py -2 {tool_path}\shellbags\shellbags.py -o csv 2> nul 1>> {outfolder}\{outfile}'
    outfolder: UserActivity
    outfile: shellbags.csv
    input: user_dir
    github: https://github.com/williballenthin/shellbags
  - name: shellbags_ntuser
    binary: fd
    args: '-i NTUSER\.DAT {input} -x py -2 {tool_path}\shellbags\shellbags.py -o csv 2> nul 1>> {outfolder}\{outfile}'
    outfolder: UserActivity
    outfile: shellbags.csv
    input: user_dir
    github: https://github.com/williballenthin/shellbags
  - name: rdp_bitmap
    binary: py
    args: '{tool_path}\bmc_run.py {outfolder} {input}'
    outfolder: Network
    outfile: '*-bitmap/*.bmp'
    input: rdp_bitmap
    github: https://github.com/ANSSI-FR/bmc-tools
  - name: regripper_amcache
    binary: '{tool_path}\regripper3.0\rip.exe'
    args: '-aT -r {input} 1>> {outfolder}\{outfile}'
    input: amcache
    outfolder: FileExecution
    outfile: regripper_amcache.psv
    github: https://www.kali.org/tools/regripper/
  - name: regripper_user_tln
    binary: fd
    args: -i -e dat [UN][ST][RU][CS] {input} -x {tool_path}\regripper3.0\rip.exe -aT -r {} 2>nul >> {outfolder}\{outfile}
    outfolder: Registry\regripper_tln
    outfile: regripper_user.psv
    input: user_dir
    github: https://www.kali.org/tools/regripper/
  - name: regripper_sam_tln
    binary: fd
    args: -i SAM {input} -x {tool_path}\regripper3.0\rip.exe -aT -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper_tln
    outfile: regripper_sam.psv
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_security_tln
    binary: fd
    args: -i Security {input} -x {tool_path}\regripper3.0\rip.exe -aT -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper_tln
    outfile: regripper_security.psv
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_software_tln
    binary: fd
    args: -i Software {input} -x {tool_path}\regripper3.0\rip.exe -aT -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper_tln
    outfile: regripper_software.psv
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_system_tln
    binary: fd
    args: -i System {input} -x {tool_path}\regripper3.0\rip.exe -aT -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper_tln
    outfile: regripper_system.psv
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_user
    binary: fd
    args: -i -e dat [UN][ST][RU][CS] {input} -x {tool_path}\regripper3.0\rip.exe -a -r {} 2>nul >> {outfolder}\{outfile}
    outfolder: Registry\regripper
    outfile: regripper_user.txt
    input: user_dir
    github: https://www.kali.org/tools/regripper/
  - name: regripper_sam
    binary: fd
    args: -i SAM {input} -x {tool_path}\regripper3.0\rip.exe -a -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper
    outfile: regripper_sam.txt
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_security
    binary: fd
    args: -i Security {input} -x {tool_path}\regripper3.0\rip.exe -a -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper
    outfile: regripper_security.txt
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_software
    binary: fd
    args: -i Software {input} -x {tool_path}\regripper3.0\rip.exe -a -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper
    outfile: regripper_software.txt
    input: system_config
    github: https://www.kali.org/tools/regripper/
  - name: regripper_system
    binary: fd
    args: -i System {input} -x {tool_path}\regripper3.0\rip.exe -a -r 1>> {outfolder}\{outfile}
    outfolder: Registry\regripper
    outfile: regripper_system.txt
    input: system_config
    github: https://www.kali.org/tools/regripper/

reporters:
  - name: polars timeline
    binary: py
    args: '{tool_path}/polars_tln.py {out_path} {start_date} {end_date}'
    outfolder: Timeline
    outfile: '*.json'
    input: none
  - name: polars hostinfo
    binary: py
    args: '{tool_path}/polars_hostinfo.py {out_path} {outfile}'
    outfolder: Timeline
    outfile: 'Host_Information.txt'
    input: none
  - name: iocs_summary
    binary: rg.exe
    args: '-aiwFf {ioc_file} {outfolder} --json > {outfolder}/{outfile}'
    outfolder: IOC_Findings
    outfile: IOCs_summary.json
    input: none
    github: https://github.com/BurntSushi/ripgrep.git
  - name: iocs_summary_csv
    binary: jq
    args: -r -f {tool_path}\jq_filters\jq_ioc_summary_filter.txt {outfolder}\IOCs_summary.json > {outfolder}\{outfile}
    outfolder: IOC_Findings
    outfile: IOCs_summary.csv
    input: none
    github: https://github.com/jqlang/jq.git
    para: false
    script: true
    script_posh: '"IOC_match,lines,data,path" > {outfolder}\{outfile}'

enrichers:
  - name: iocs_analysis
    binary: rg.exe
    args: '--hidden --trim -zUiFf {ioc_file} {out_path} > {outfolder}/{outfile}'
    outfolder: IOC_Findings
    outfile: iocs_analysis.txt
    input: base
    github: https://github.com/BurntSushi/ripgrep.git
  - name: iocs_pagefile
    binary: rg.exe
    args: '--hidden --trim -aziFf {ioc_file} {input} > {outfolder}/{outfile}'
    outfolder: IOC_Findings
    outfile: iocs_pagefile.txt
    input: pagefile
    github: https://github.com/BurntSushi/ripgrep.git
  - name: iocs_datasource
    binary: rg.exe
    args: '--hidden --trim -aziFf {ioc_file} {input} > {outfolder}/{outfile}'
    outfolder: IOC_Findings
    outfile: iocs_datasource.txt
    input: base
    github: https://github.com/BurntSushi/ripgrep.git
  # - name: loki_analysis
  #   binary: '{tool_path}/loki/loki/loki.exe'
  #   args: '--intense --noprocscan --nolevcheck --nopesieve --nolisten --dontwait -s 15000 -p {out_path} --logfolder {outfolder}'
  #   outfolder: IOC_Findings\loki_analysis
  #   outfile: '*.log'
  #   input: none
  # - name: loki_datasource
  #   binary: '{tool_path}/loki/loki/loki.exe'
  #   args: '--intense --noprocscan --nolevcheck --nopesieve --nolisten --dontwait -s 15000 -p {input} --logfolder {outfolder}'
  #   outfolder: IOC_Findings\loki_datasource
  #   outfile: '*.log'
  #   input: base
  #   para: false
  - name: thor_analysis
    binary: '{tool_path}/thor-lite/thor64-lite.exe'
    args: '-a Filescan --intense --cross-platform --max_file_size 500MB --threads 0 -p {out_path} -e {outfolder}'
    outfolder: IOC_Findings\thor_analysis
    outfile: '*.txt'
    input: none
  - name: thor_datasource
    binary: '{tool_path}/thor-lite/thor64-lite.exe'
    args: '-a Filescan --intense --cross-platform --max_file_size 500MB --threads 0 -p {input} -e {outfolder}'
    outfolder: IOC_Findings\thor_datasource
    outfile: '*.txt'
    input: base
    para: false
  - name: Executablelist 
    binary: 'pwsh.exe'
    args: '{tool_path}\Executablelist.ps1 {outfolder}\{outfile} {tool_path}'
    outfolder: FileExecution
    outfile: MISP
    input: pagefile
  - name: jq_chainsaw_srum
    binary: jq
    args: -r -f {tool_path}\jq_filters\jq_chainsaw_srum_filter.txt {out_path}\Network\chainsaw_srum.json >> {outfolder}\{outfile}
    outfolder: Network
    outfile: chainsaw_srum.csv
    input: base
    script: true
    script_posh: '"TimeStamp,UserName,UserSID,UserId,AppName,AddId,AutoIncId,BackgroundBytesRead,BackgroundBytesWritten,BackgroundContextSwitches,BackgroundCycleTime,BackgroundNumReadOperations,BackgroundNumWriteOperations,BackgroundNumberOfFlushes,FaceTime,ForegroundBytesRead,ForegroundBytesWritten,ForegroundContextSwitches,ForegroundCycleTime,ForegroundNumReadOperations,ForegroundNumWriteOperations,ForegroundNumberOfFlushes,Table,TableName" > {outfolder}\{outfile}'
